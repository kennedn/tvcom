#!/usr/bin/env python3
from serial import Serial
from getopt import getopt, GetoptError
from sys import argv
from serial_lookup import SerialLookup
import atexit
import sys

# All protocol information gleamed from user manual for LG5000 series,  ###
# https://www.lg.com/uk/support/product/lg-37LG5000 (page 109 onward)   ###


def print_help():
    print('''
Wrapper script for speaking to an LG tv (37LG5000) via an RS-232 serial connection.
Command should be formatted as such:
./tvcom [-lh] [-k name/long_name] [-c "long_name desc" ] [-r "name keycode" ]

-l, --list:           Get a list of defined long_names for commands
-k, --list_keycodes:  Get a list of keycodes for a given long_name (expects arg)
-c, --command:        Run a command using long_name and description, get these values from -l and -k, default command is status
-r, --raw_command:    Run a command using name and keycode, get these values from -l and -k
-h, --help:           Display this message

Example, to turn device off:
./tvcom -c power off
or
./tvcom -r ka 00
''')
    exit(1)


def exception_handler(exception_type, exception, traceback):
    print("{}: {}".format(exception_type.__name__, exception))


def cleanup():
    try:
        tv_serial.close()
    except serial.SerialException:
        pass


if __name__ == "__main__":
    sys.excepthook = exception_handler
    atexit.register(cleanup)

    # Defaults
    serial_timeout = 3
    tv_serial = Serial('/dev/rfcomm0', timeout=serial_timeout)
    raw = None

    try:
        options, remainder = getopt(argv[1:], 'k:r:c:lh?',
                                    ['list_keycodes=', 'raw_command=', 'command=', 'list', 'help', 'check_conn'])
    except GetoptError as e:
        raise Exception(e)
        print_help()

    for opt, arg in options:
        if opt in ('-l', '--list'):
            SerialLookup.list()
            exit(0)
        elif opt in ('-k', '--list_keycodes'):
            SerialLookup.list_keycodes(arg)
            exit(0)
        elif opt in ('-r', '--raw_command'):
            command = arg
            raw = True
        elif opt in ('-c', '--command'):
            command = arg
            raw = False
        elif opt in ('-h', '--help'):
            print_help()
        else:
            print("arg is not a recognised paramater")
            exit(1)

    if (len(argv) < 3 or raw is None):
        if (len(argv) >= 2):
            command = ""
        else:
            print_help()

    if remainder:
        command += ' ' + ' '.join(remainder)

    # If we want to just send a direct command in the format XX 00 YY
    # where XX is a keycode and YY is the data
    if raw:
        # Sanity check that we are getting passed the right number of chars
        if (len(command) == 5):
            # get the correct instance incase we need to do an error lookup later
            instance = SerialLookup.get_inst_from_name(command[0:2])
            if instance is None:
                raise Exception("Instance lookup failed for {}".format(command[0:2]))
            # write our formatted hex string out to a varaible
            if instance.get_desc(command[3:5]) is not None:
                write_bytes = ("{0} 00 {1}\r".format(command[0:2], command[3:5])).encode()
            else:
                raise Exception("Keycode lookup failed for {}".format(command[3:5]))
        else:
            raise Exception("Malformed raw command")
    else:
        # set default action to 'status' if second arg not given
        if (len(command.split()) == 2):
            long_name, cmd = command.split()
        elif(len(command.split()) == 1):
            long_name = command.split()[0]
            cmd = "status"
        else:
            raise Exception("Need at least one argument for command")

        # Attempt to retrieve instance from long_name
        instance = SerialLookup.get_inst_from_long(long_name)
        if instance is None:
            raise Exception("Instance lookup failed for {}".format(long_name))

        # Attempt to retrieve keycode from description
        keycode = instance.get_keycode(cmd)
        if keycode is None:
            raise Exception("Keycode lookup failed for {}".format(cmd))

        # Write our formatted hex string (using instance lookup) out to a variable
        write_bytes = "{0} 00 {1}\r".format(instance.name,
                                            keycode).encode()

    # write our data out to the serial socket
    tv_serial.write(write_bytes)

    # In normal cases, device always returns 10 chars from a command
    # example format: a 01 OK01x
    # if the device is in a transient state, nothing may be sent or we may
    # actually get a success status despite no action occuring tv side :(
    # Timeout value defined above to catch nothing sent case
    status = tv_serial.read(10).decode()
    if len(status) != 10:
        if len(status) == 0:
            raise Exception("The TV didn't respond, please check connection")
        else:
            raise Exception("The TV didn't respond with expected response")

    # If we got a NG (not good) status back
    if status[5:7] == "NG":
        raise Exception("Device returned error")

    # If we sent an FF as data to the serial socket (status request)
    if write_bytes.split()[-1].upper() == b'FF':
        # lookup and print a description of the status value
        print("{}".format(instance.get_desc(status[7:9])))

    cleanup
